{"ast":null,"code":"import _regeneratorRuntime from \"/Users/adam/Documents/jiffy/node_modules/@babel/runtime/regenerator\";\nimport _toConsumableArray from \"/Users/adam/Documents/jiffy/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _objectSpread from \"/Users/adam/Documents/jiffy/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _asyncToGenerator from \"/Users/adam/Documents/jiffy/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"/Users/adam/Documents/jiffy/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/adam/Documents/jiffy/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/adam/Documents/jiffy/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/adam/Documents/jiffy/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/adam/Documents/jiffy/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/adam/Documents/jiffy/src/App.js\";\nimport React, { Component } from 'react'; // Importing the spinner and assinging it to the variable loader\n\nimport loader from \"./images/loader.svg\";\n\nvar randomChoice = function randomChoice(arr) {\n  var randIndex = Math.floor(Math.random() * arr.length);\n  return arr[randIndex];\n};\n\nvar Header = function Header() {\n  return React.createElement(\"div\", {\n    className: \"header grid\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 11\n    },\n    __self: this\n  }, React.createElement(\"h1\", {\n    className: \"title\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 12\n    },\n    __self: this\n  }, \"Jiffy\"));\n};\n\nvar UserHint = function UserHint(_ref) {\n  var loading = _ref.loading,\n      hintText = _ref.hintText;\n  return React.createElement(\"div\", {\n    className: \"user-hint\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 17\n    },\n    __self: this\n  }, loading ? React.createElement(\"img\", {\n    className: \"block mx-auto\",\n    src: loader,\n    alt: \"loading\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 19\n    },\n    __self: this\n  }) : hintText);\n};\n\nvar App =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(App, _Component);\n\n  function App(props) {\n    var _this;\n\n    _classCallCheck(this, App);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(App).call(this, props));\n\n    _this.searchGiphy =\n    /*#__PURE__*/\n    function () {\n      var _ref2 = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee(searchTerm) {\n        var response, _ref3, data, randomGif;\n\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.prev = 0;\n                _context.next = 3;\n                return fetch(\"https://api.giphy.com/v1/gifs/search?api_key=JfSxEmSQYMargv746Rd6JXaa1FCGFTqM&q=\".concat(searchTerm, \"&limit=25&offset=0&rating=G&lang=en\"));\n\n              case 3:\n                response = _context.sent;\n                _context.next = 6;\n                return response.json();\n\n              case 6:\n                _ref3 = _context.sent;\n                data = _ref3.data;\n                // here we grab a random result from the images\n                randomGif = randomChoice(data);\n                console.log(data);\n                console.log(randomGif);\n\n                _this.setState(function (prevState, props) {\n                  return _objectSpread({}, prevState, {\n                    gif: randomGif,\n                    // here we take our spread to take the previous gifs\n                    // and spread them out and then add our random gif to the end\n                    gifs: _toConsumableArray(prevState.gifs).concat([randomGif])\n                  });\n                });\n\n                _context.next = 16;\n                break;\n\n              case 14:\n                _context.prev = 14;\n                _context.t0 = _context[\"catch\"](0);\n\n              case 16:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this, [[0, 14]]);\n      }));\n\n      return function (_x) {\n        return _ref2.apply(this, arguments);\n      };\n    }();\n\n    _this.handleChange = function (event) {\n      _this.setState(function (prevState, props) {\n        return _objectSpread({}, prevState, {\n          // and then we overwrite the ones we want after\n          searchTerm: value,\n          hintText: value.length > 2 ? \"Hit enter to search \".concat(value) : ''\n        });\n      });\n\n      console.log(event.key);\n      var value = event.target.value;\n      console.log(value);\n\n      if (value.length > 2) {}\n    };\n\n    _this.handleKeyPress = function (event) {\n      var value = event.target.value;\n\n      if (value.length > 2 && event.key === 'Enter') {\n        _this.searchGiphy(value);\n      }\n    };\n\n    _this.state = {\n      searchTerm: '',\n      hintText: '',\n      gif: null,\n      // this is an array for the gifs\n      gifs: []\n    };\n    return _this;\n  } // we want a function that searches the Giphy API\n  // fetch puts the search term into the query\n  // then we can do something with the results\n\n\n  _createClass(App, [{\n    key: \"render\",\n    //when we have two or more chars in the search box and we also press enter\n    // we want to run a search\n    value: function render() {\n      var _this$state = this.state,\n          searchTerm = _this$state.searchTerm,\n          gif = _this$state.gif;\n      return React.createElement(\"div\", {\n        className: \"page\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 103\n        },\n        __self: this\n      }, React.createElement(Header, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 104\n        },\n        __self: this\n      }), React.createElement(\"div\", {\n        className: \"search grid\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 105\n        },\n        __self: this\n      }, gif && React.createElement(\"video\", {\n        className: \"grid-item video\",\n        autoPlay: true,\n        loop: true,\n        src: gif.images.original.mp4,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 108\n        },\n        __self: this\n      }), React.createElement(\"input\", {\n        className: \"input grid-item\",\n        placeholder: \"Type something\",\n        onChange: this.handleChange,\n        onKeyPress: this.handleKeyPress,\n        value: searchTerm,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 114\n        },\n        __self: this\n      })), React.createElement(UserHint, Object.assign({}, this.state, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 123\n        },\n        __self: this\n      })));\n    }\n  }]);\n\n  return App;\n}(Component);\n\nexport default App;","map":{"version":3,"sources":["/Users/adam/Documents/jiffy/src/App.js"],"names":["React","Component","randomChoice","arr","randIndex","Math","floor","random","length","Header","UserHint","loading","hintText","loader","App","props","searchGiphy","searchTerm","fetch","response","json","data","randomGif","console","log","setState","prevState","gif","gifs","handleChange","event","value","key","target","handleKeyPress","state","images","original","mp4"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\n// Importing the spinner and assinging it to the variable loader\nimport loader from './images/loader.svg';\n\nconst randomChoice = arr => {\n  const randIndex = Math.floor(Math.random() * arr.length);\n  return arr[randIndex];\n}\n\nconst Header = () => (\n  <div className='header grid'>\n    <h1 className=\"title\">Jiffy</h1>\n  </div>\n)\n\nconst UserHint = ({ loading, hintText }) => (\n  <div className='user-hint'>\n    {/* Determine if item is loading show spinner if not show the hint text */}\n    {loading ? <img className=\"block mx-auto\" src={loader} alt=\"loading\" /> :\n      hintText}\n  </div>\n)\n\nclass App extends Component {\n\n  constructor(props) {\n    super(props)\n    this.state = {\n      searchTerm: '',\n      hintText: '',\n      gif: null,\n      // this is an array for the gifs\n      gifs: []\n    };\n  }\n\n  // we want a function that searches the Giphy API\n  // fetch puts the search term into the query\n  // then we can do something with the results\n\n  searchGiphy = async searchTerm => {\n    // first we try our fetch\n    try {\n      //here we use the await keyword to wait for the response to come back\n      const response = await fetch(`https://api.giphy.com/v1/gifs/search?api_key=JfSxEmSQYMargv746Rd6JXaa1FCGFTqM&q=${searchTerm}&limit=25&offset=0&rating=G&lang=en`);\n      //here we convert our raw response into json data\n      const { data } = await response.json();\n\n      // here we grab a random result from the images\n      const randomGif = randomChoice(data);\n\n      console.log(data);\n      console.log(randomGif);\n\n\n      this.setState((prevState, props) => ({\n        ...prevState,\n        gif: randomGif,\n        // here we take our spread to take the previous gifs\n        // and spread them out and then add our random gif to the end\n        gifs: [...prevState.gifs, randomGif]\n      }))\n    }\n\n    // if our fetch fails then we catch an error\n    catch (error) {\n\n    }\n  }\n\n\n  // with create react app we can write our methods\n  // as arrow functions, meaning we don't need the constructor and bind\n  handleChange = event => {\n    this.setState((prevState, props) => ({\n      // we take our old props and spread them out here\n      ...prevState,\n      // and then we overwrite the ones we want after\n      searchTerm: value,\n      hintText: value.length > 2 ? `Hit enter to search ${value}` : ''\n    }))\n    console.log(event.key)\n\n    const { value } = event.target;\n    console.log(value);\n    if (value.length > 2) {\n    }\n  };\n\n  handleKeyPress = event => {\n    const { value } = event.target\n    if (value.length > 2 && event.key === 'Enter') {\n      this.searchGiphy(value);\n    }\n  };\n\n  //when we have two or more chars in the search box and we also press enter\n  // we want to run a search\n\n  render() {\n    const { searchTerm, gif } = this.state\n    return (\n      <div className=\"page\" >\n        <Header />\n        <div className='search grid'>\n          {/* {our stack of gif images} */}\n\n          {gif && <video\n            className='grid-item video'\n            autoPlay\n            loop\n            src={gif.images.original.mp4}\n          />}\n          <input\n            className='input grid-item'\n            placeholder='Type something'\n            onChange={this.handleChange}\n            onKeyPress={this.handleKeyPress}\n            value={searchTerm}\n          />\n        </div>\n\n        <UserHint {...this.state} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}