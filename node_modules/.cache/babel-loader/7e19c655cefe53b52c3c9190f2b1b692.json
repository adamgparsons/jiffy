{"ast":null,"code":"import _regeneratorRuntime from \"/Users/adam/Documents/jiffy/node_modules/@babel/runtime/regenerator\";\nimport _toConsumableArray from \"/Users/adam/Documents/jiffy/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _objectSpread from \"/Users/adam/Documents/jiffy/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _asyncToGenerator from \"/Users/adam/Documents/jiffy/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"/Users/adam/Documents/jiffy/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/adam/Documents/jiffy/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/adam/Documents/jiffy/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/adam/Documents/jiffy/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/adam/Documents/jiffy/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/adam/Documents/jiffy/src/App.js\";\nimport React, { Component } from 'react'; // Importing the spinner and assinging it to the variable loader\n\nimport loader from \"./images/loader.svg\";\nimport Gif from './Gif';\n\nvar randomChoice = function randomChoice(arr) {\n  var randIndex = Math.floor(Math.random() * arr.length);\n  return arr[randIndex];\n};\n\nvar Header = function Header() {\n  return React.createElement(\"div\", {\n    className: \"header grid\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 12\n    },\n    __self: this\n  }, React.createElement(\"h1\", {\n    className: \"title\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 13\n    },\n    __self: this\n  }, \" Jiffy \"), ' ');\n};\n\nvar UserHint = function UserHint(_ref) {\n  var loading = _ref.loading,\n      hintText = _ref.hintText;\n  return React.createElement(\"div\", {\n    className: \"user-hint\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 18\n    },\n    __self: this\n  }, ' ', ' ', loading ? React.createElement(\"img\", {\n    className: \"block mx-auto\",\n    src: loader,\n    alt: \"loading\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 21\n    },\n    __self: this\n  }) : hintText, ' ');\n};\n\nvar App =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(App, _Component);\n\n  function App(props) {\n    var _this;\n\n    _classCallCheck(this, App);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(App).call(this, props));\n\n    _this.searchGiphy =\n    /*#__PURE__*/\n    function () {\n      var _ref2 = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee(searchTerm) {\n        var response, _ref3, data, randomGif;\n\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                // first we try our fetch\n                //here we set our loading state to be true\n                //this will show the spinner at the bottom\n                _this.setState({\n                  loading: true\n                });\n\n                _context.prev = 1;\n                _context.next = 4;\n                return fetch(\"https://api.giphy.com/v1/gifs/search?api_key=JfSxEmSQYMargv746Rd6JXaa1FCGFTqM&q=\".concat(searchTerm, \"&limit=25&offset=0&rating=G&lang=en\"));\n\n              case 4:\n                response = _context.sent;\n                _context.next = 7;\n                return response.json();\n\n              case 7:\n                _ref3 = _context.sent;\n                data = _ref3.data;\n                // here we grab a random result from the images\n                randomGif = randomChoice(data);\n                console.log(data);\n                console.log(randomGif);\n\n                _this.setState(function (prevState, props) {\n                  return _objectSpread({}, prevState, {\n                    gif: randomGif,\n                    // here we take our spread to take the previous gifs\n                    // and spread them out and then add our random gif to the end\n                    gifs: _toConsumableArray(prevState.gifs).concat([randomGif]),\n                    // we turn off the spinner\n                    loading: false\n                  });\n                });\n\n                _context.next = 17;\n                break;\n\n              case 15:\n                _context.prev = 15;\n                _context.t0 = _context[\"catch\"](1);\n\n              case 17:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this, [[1, 15]]);\n      }));\n\n      return function (_x) {\n        return _ref2.apply(this, arguments);\n      };\n    }();\n\n    _this.handleChange = function (event) {\n      _this.setState(function (prevState, props) {\n        return _objectSpread({}, prevState, {\n          // and then we overwrite the ones we want after\n          searchTerm: value,\n          hintText: value.length > 2 ? \"Hit enter to search \".concat(value) : ''\n        });\n      });\n\n      console.log(event.key);\n      var value = event.target.value;\n      console.log(value);\n\n      if (value.length > 2) {}\n    };\n\n    _this.handleKeyPress = function (event) {\n      var value = event.target.value;\n\n      if (value.length > 2 && event.key === 'Enter') {\n        _this.searchGiphy(value);\n      }\n    };\n\n    _this.state = {\n      loading: false,\n      searchTerm: '',\n      hintText: '',\n      gif: null,\n      // this is an array for the gifs\n      gifs: []\n    };\n    return _this;\n  } // we want a function that searches the Giphy API\n  // fetch puts the search term into the query\n  // then we can do something with the results\n\n\n  _createClass(App, [{\n    key: \"render\",\n    //when we have two or more chars in the search box and we also press enter\n    // we want to run a search\n    value: function render() {\n      var _this$state = this.state,\n          searchTerm = _this$state.searchTerm,\n          gif = _this$state.gif;\n      return React.createElement(\"div\", {\n        className: \"page\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 108\n        },\n        __self: this\n      }, React.createElement(Header, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 109\n        },\n        __self: this\n      }), React.createElement(\"div\", {\n        className: \"search grid\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 110\n        },\n        __self: this\n      }, ' ', this.state.gifs.map(function (gif) {\n        return React.createElement(Gif, Object.assign({}, gif, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 114\n          },\n          __self: this\n        }));\n      }), React.createElement(\"input\", {\n        className: \"input grid-item\",\n        placeholder: \"Type something\",\n        onChange: this.handleChange,\n        onKeyPress: this.handleKeyPress,\n        value: searchTerm,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 116\n        },\n        __self: this\n      }), ' '), React.createElement(UserHint, Object.assign({}, this.state, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 124\n        },\n        __self: this\n      })), ' ');\n    }\n  }]);\n\n  return App;\n}(Component);\n\nexport default App;","map":{"version":3,"sources":["/Users/adam/Documents/jiffy/src/App.js"],"names":["React","Component","Gif","randomChoice","arr","randIndex","Math","floor","random","length","Header","UserHint","loading","hintText","loader","App","props","searchGiphy","searchTerm","setState","fetch","response","json","data","randomGif","console","log","prevState","gif","gifs","handleChange","event","value","key","target","handleKeyPress","state","map"],"mappings":"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","sourcesContent":["import React, {Component} from 'react';\n// Importing the spinner and assinging it to the variable loader\nimport loader from './images/loader.svg';\nimport Gif from './Gif';\n\nconst randomChoice = arr => {\n  const randIndex = Math.floor(Math.random() * arr.length);\n  return arr[randIndex];\n};\n\nconst Header = () => (\n  <div className=\"header grid\">\n    <h1 className=\"title\"> Jiffy </h1>{' '}\n  </div>\n);\n\nconst UserHint = ({loading, hintText}) => (\n  <div className=\"user-hint\">\n    {' '}\n    {/* Determine if item is loading show spinner if not show the hint text */}{' '}\n    {loading ? <img className=\"block mx-auto\" src={loader} alt=\"loading\" /> : hintText}{' '}\n  </div>\n);\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      loading: false,\n      searchTerm: '',\n      hintText: '',\n      gif: null,\n      // this is an array for the gifs\n      gifs: []\n    };\n  }\n\n  // we want a function that searches the Giphy API\n  // fetch puts the search term into the query\n  // then we can do something with the results\n\n  searchGiphy = async searchTerm => {\n    // first we try our fetch\n    //here we set our loading state to be true\n    //this will show the spinner at the bottom\n    this.setState({\n      loading: true\n    });\n    try {\n      //here we use the await keyword to wait for the response to come back\n      const response = await fetch(\n        `https://api.giphy.com/v1/gifs/search?api_key=JfSxEmSQYMargv746Rd6JXaa1FCGFTqM&q=${searchTerm}&limit=25&offset=0&rating=G&lang=en`\n      );\n      //here we convert our raw response into json data\n      const {data} = await response.json();\n\n      // here we grab a random result from the images\n      const randomGif = randomChoice(data);\n\n      console.log(data);\n      console.log(randomGif);\n\n      this.setState((prevState, props) => ({\n        ...prevState,\n        gif: randomGif,\n        // here we take our spread to take the previous gifs\n        // and spread them out and then add our random gif to the end\n        gifs: [...prevState.gifs, randomGif],\n        // we turn off the spinner\n        loading: false\n      }));\n    } catch (error) {\n      // if our fetch fails then we catch an error\n    }\n  };\n\n  // with create react app we can write our methods\n  // as arrow functions, meaning we don't need the constructor and bind\n  handleChange = event => {\n    this.setState((prevState, props) => ({\n      // we take our old props and spread them out here\n      ...prevState,\n      // and then we overwrite the ones we want after\n      searchTerm: value,\n      hintText: value.length > 2 ? `Hit enter to search ${value}` : ''\n    }));\n    console.log(event.key);\n\n    const {value} = event.target;\n    console.log(value);\n    if (value.length > 2) {\n    }\n  };\n\n  handleKeyPress = event => {\n    const {value} = event.target;\n    if (value.length > 2 && event.key === 'Enter') {\n      this.searchGiphy(value);\n    }\n  };\n\n  //when we have two or more chars in the search box and we also press enter\n  // we want to run a search\n\n  render() {\n    const {searchTerm, gif} = this.state;\n    return (\n      <div className=\"page\">\n        <Header />\n        <div className=\"search grid\">\n          {' '}\n          {/* {our stack of gif images} */}\n          {this.state.gifs.map(gif => (\n            <Gif {...gif} />\n          ))}\n          <input\n            className=\"input grid-item\"\n            placeholder=\"Type something\"\n            onChange={this.handleChange}\n            onKeyPress={this.handleKeyPress}\n            value={searchTerm}\n          />{' '}\n        </div>\n        <UserHint {...this.state} />{' '}\n      </div>\n    );\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}