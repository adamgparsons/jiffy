{"ast":null,"code":"import _regeneratorRuntime from \"/Users/adam/Documents/jiffy/node_modules/@babel/runtime/regenerator\";\nimport _toConsumableArray from \"/Users/adam/Documents/jiffy/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _objectSpread from \"/Users/adam/Documents/jiffy/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _asyncToGenerator from \"/Users/adam/Documents/jiffy/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"/Users/adam/Documents/jiffy/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/adam/Documents/jiffy/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/adam/Documents/jiffy/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/adam/Documents/jiffy/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/adam/Documents/jiffy/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/adam/Documents/jiffy/src/App.js\";\nimport React, { Component } from 'react'; // Importing the spinner and assinging it to the variable loader\n\nimport loader from \"./images/loader.svg\";\nimport Gif from './Gif';\n\nvar randomChoice = function randomChoice(arr) {\n  var randIndex = Math.floor(Math.random() * arr.length);\n  return arr[randIndex];\n};\n\nvar Header = function Header() {\n  return React.createElement(\"div\", {\n    className: \"header grid\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 13\n    },\n    __self: this\n  }, React.createElement(\"h1\", {\n    className: \"title\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 15\n    },\n    __self: this\n  }, \" Jiffy \"), \" \");\n};\n\nvar UserHint = function UserHint(_ref) {\n  var loading = _ref.loading,\n      hintText = _ref.hintText;\n  return React.createElement(\"div\", {\n    className: \"user-hint\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 23\n    },\n    __self: this\n  }, \" \", \" \", loading ? React.createElement(\"img\", {\n    className: \"block mx-auto\",\n    src: loader,\n    alt: \"loading\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 25\n    },\n    __self: this\n  }) : hintText, \" \");\n};\n\nvar App =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(App, _Component);\n\n  function App(props) {\n    var _this;\n\n    _classCallCheck(this, App);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(App).call(this, props));\n\n    _this.searchGiphy =\n    /*#__PURE__*/\n    function () {\n      var _ref2 = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee(searchTerm) {\n        var response, _ref3, data, randomGif;\n\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                // first we try our fetch\n                _this.setState({\n                  loading: true\n                });\n\n                _context.prev = 1;\n                _context.next = 4;\n                return fetch(\"https://api.giphy.com/v1/gifs/search?api_key=JfSxEmSQYMargv746Rd6JXaa1FCGFTqM&q=\".concat(searchTerm, \"&limit=25&offset=0&rating=G&lang=en\"));\n\n              case 4:\n                response = _context.sent;\n                _context.next = 7;\n                return response.json();\n\n              case 7:\n                _ref3 = _context.sent;\n                data = _ref3.data;\n                // here we grab a random result from the images\n                randomGif = randomChoice(data);\n                console.log(data);\n                console.log(randomGif);\n\n                _this.setState(function (prevState, props) {\n                  return _objectSpread({}, prevState, {\n                    gif: randomGif,\n                    // here we take our spread to take the previous gifs\n                    // and spread them out and then add our random gif to the end\n                    gifs: _toConsumableArray(prevState.gifs).concat([randomGif])\n                  });\n                });\n\n                _context.next = 17;\n                break;\n\n              case 15:\n                _context.prev = 15;\n                _context.t0 = _context[\"catch\"](1);\n\n              case 17:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this, [[1, 15]]);\n      }));\n\n      return function (_x) {\n        return _ref2.apply(this, arguments);\n      };\n    }();\n\n    _this.handleChange = function (event) {\n      _this.setState(function (prevState, props) {\n        return _objectSpread({}, prevState, {\n          // and then we overwrite the ones we want after\n          searchTerm: value,\n          hintText: value.length > 2 ? \"Hit enter to search \".concat(value) : ''\n        });\n      });\n\n      console.log(event.key);\n      var value = event.target.value;\n      console.log(value);\n\n      if (value.length > 2) {}\n    };\n\n    _this.handleKeyPress = function (event) {\n      var value = event.target.value;\n\n      if (value.length > 2 && event.key === 'Enter') {\n        _this.searchGiphy(value);\n      }\n    };\n\n    _this.state = {\n      searchTerm: '',\n      hintText: '',\n      gif: null,\n      // this is an array for the gifs\n      gifs: []\n    };\n    return _this;\n  } // we want a function that searches the Giphy API\n  // fetch puts the search term into the query\n  // then we can do something with the results\n\n\n  _createClass(App, [{\n    key: \"render\",\n    //when we have two or more chars in the search box and we also press enter\n    // we want to run a search\n    value: function render() {\n      var _this$state = this.state,\n          searchTerm = _this$state.searchTerm,\n          gif = _this$state.gif;\n      return React.createElement(\"div\", {\n        className: \"page\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 124\n        },\n        __self: this\n      }, React.createElement(Header, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 126\n        },\n        __self: this\n      }), React.createElement(\"div\", {\n        className: \"search grid\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 128\n        },\n        __self: this\n      }, \" \", this.state.gifs.map(function (gif) {\n        return React.createElement(Gif, Object.assign({}, gif, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 133\n          },\n          __self: this\n        }));\n      }), React.createElement(\"input\", {\n        className: \"input grid-item\",\n        placeholder: \"Type something\",\n        onChange: this.handleChange,\n        onKeyPress: this.handleKeyPress,\n        value: searchTerm,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 140\n        },\n        __self: this\n      }), \" \"), React.createElement(UserHint, Object.assign({}, this.state, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 155\n        },\n        __self: this\n      })), \" \");\n    }\n  }]);\n\n  return App;\n}(Component);\n\nexport default App;","map":{"version":3,"sources":["/Users/adam/Documents/jiffy/src/App.js"],"names":["React","Component","Gif","randomChoice","arr","randIndex","Math","floor","random","length","Header","UserHint","loading","hintText","loader","App","props","searchGiphy","searchTerm","setState","fetch","response","json","data","randomGif","console","log","prevState","gif","gifs","handleChange","event","value","key","target","handleKeyPress","state","map"],"mappings":"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","sourcesContent":["import React, {\n  Component\n} from 'react';\n// Importing the spinner and assinging it to the variable loader\nimport loader from './images/loader.svg';\nimport Gif from './Gif';\n\nconst randomChoice = arr => {\n  const randIndex = Math.floor(Math.random() * arr.length);\n  return arr[randIndex];\n}\n\nconst Header = () => ( <\n  div className = 'header grid' >\n  <\n  h1 className = \"title\" > Jiffy < /h1> <\n  /div>\n)\n\nconst UserHint = ({\n  loading,\n  hintText\n}) => ( <\n  div className = 'user-hint' > { /* Determine if item is loading show spinner if not show the hint text */ } {\n    loading ? < img className = \"block mx-auto\"\n    src = {\n      loader\n    }\n    alt = \"loading\" / >:\n      hintText\n  } <\n  /div>\n)\n\nclass App extends Component {\n\n  constructor(props) {\n    super(props)\n    this.state = {\n      searchTerm: '',\n      hintText: '',\n      gif: null,\n      // this is an array for the gifs\n      gifs: []\n    };\n  }\n\n  // we want a function that searches the Giphy API\n  // fetch puts the search term into the query\n  // then we can do something with the results\n\n  searchGiphy = async searchTerm => {\n    // first we try our fetch\n    this.setState({\n      loading: true\n    })\n    try {\n      //here we use the await keyword to wait for the response to come back\n      const response = await fetch(`https://api.giphy.com/v1/gifs/search?api_key=JfSxEmSQYMargv746Rd6JXaa1FCGFTqM&q=${searchTerm}&limit=25&offset=0&rating=G&lang=en`);\n      //here we convert our raw response into json data\n      const {\n        data\n      } = await response.json();\n\n      // here we grab a random result from the images\n      const randomGif = randomChoice(data);\n\n      console.log(data);\n      console.log(randomGif);\n\n\n      this.setState((prevState, props) => ({\n        ...prevState,\n        gif: randomGif,\n        // here we take our spread to take the previous gifs\n        // and spread them out and then add our random gif to the end\n        gifs: [...prevState.gifs, randomGif]\n      }))\n    }\n\n    // if our fetch fails then we catch an error\n    catch (error) {\n\n    }\n  }\n\n\n  // with create react app we can write our methods\n  // as arrow functions, meaning we don't need the constructor and bind\n  handleChange = event => {\n    this.setState((prevState, props) => ({\n      // we take our old props and spread them out here\n      ...prevState,\n      // and then we overwrite the ones we want after\n      searchTerm: value,\n      hintText: value.length > 2 ? `Hit enter to search ${value}` : ''\n    }))\n    console.log(event.key)\n\n    const {\n      value\n    } = event.target;\n    console.log(value);\n    if (value.length > 2) {}\n  };\n\n  handleKeyPress = event => {\n    const {\n      value\n    } = event.target\n    if (value.length > 2 && event.key === 'Enter') {\n      this.searchGiphy(value);\n    }\n  };\n\n  //when we have two or more chars in the search box and we also press enter\n  // we want to run a search\n\n  render() {\n    const {\n      searchTerm,\n      gif\n    } = this.state\n    return ( <\n      div className = \"page\" >\n      <\n      Header / >\n      <\n      div className = 'search grid' > { /* {our stack of gif images} */ }\n\n\n      {\n        this.state.gifs.map(gif => ( <\n          Gif { ...gif\n          }\n          />\n        ))\n      }\n\n      <\n      input className = 'input grid-item'\n      placeholder = 'Type something'\n      onChange = {\n        this.handleChange\n      }\n      onKeyPress = {\n        this.handleKeyPress\n      }\n      value = {\n        searchTerm\n      }\n      /> <\n      /div>\n\n      <\n      UserHint { ...this.state\n      }\n      /> <\n      /div>\n    );\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}